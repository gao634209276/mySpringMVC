专题三 AOP
什么是AOP以及实现方式
AOP基本概念
Spring中的AOP
Schema-based AOP
Spring AOP API
AspectJ

什么是AOP
	AOP:Aspect Oriented Programming的缩写,意思是:面向切面编程,通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术.
	主导的功能是:日志记录,性能统计,安全控制,事务处理,异常处理等等

AOP实现方式
	预编译
		AspectJ
	运行期动态代理(JDK动态代理,CGLib动态代理)
		SpringAOP,JbossAOP

AOP的一些概念
描述AOP常用的一些术语有通知(Adivce)、切点（Pointcut）、连接点（Join point）、切面（Aspect）、引入（Introduction）、织入（Weaving）
	1.通知（Advice）在切面的某个特定的连接点上执行的动作,通知分为五中类型：
		前置通知(Before):在方法被调用之前调用
			在某连接点(join point)之前执行的通知,但不能阻止连接点前的执行(除非它抛出一个异常)
		后通知(After(finally)):在方法完成后调用通知，无论方法是否执行成功
			当某练级诶单退出时候执行的通知(不论是正常还是异常)
		返回后通知(After-returning):在方法成功执行之后调用通知
			在某个连接点(join point)正常完成后执行的通知
		After-throwing:在方法抛出异常后调用通知
		Around:通知了好、包含了被通知的方法，在被通知的方法调用之前后调用之后执行自定义的行为
			包围一个连接点(join point)的通知
	2.连接点（JoinPoint）程序执行过程中的某个特定的点
		比如：方法调用、方法执行、字段设置/获取、异常处理执行、类初始化、甚至是 for 循环中的某个点
		理论上, 程序执行过程中的任何时点都可以作为作为织入点, 而所有这些执行时点都是 Joint point
		但 Spring AOP 目前仅支持方法执行 (method execution)
	3.切入点（Pointcut）匹配连接点的断言,在AOP中通知和一个切入点表达式关联
		通知（advice）定义了切面何时，那么切点就是定义切面“何处” 描述某一类 Joint points,
		比如定义了很多 Joint point, 对于 Spring AOP 来说就是匹配哪些方法的执行
	描述方式：
		直接指定 Jointpoint 所在的方法名, 功能比较单一, 通常只支持方法级别的 AOP 框架
		正则表达式
		特定的描述语言, 如 AspectJ 提供的 Pointcut 描述语言
	理解:
		上面说的连接点的基础上，来定义切入点，你的一个类里，有15个方法，那就有几十个连接点了对把，
		但是你并不想在所有方法附近都使用通知（使用叫织入，以后再说），你只想让其中的几个，在调用这几个方法之前，之后或者抛出异常时干点什么，
		那么就用切点来定义这几个方法，让切点来筛选连接点，选中那几个你想要的方法。
	4.切面（Aspect）一个关注点的模块化,这个关注点可能会横切多个对象
		切面是切点和通知的结合。通知和切点共同定义了关于切面的全部内容，它是什么时候，在何时和何处完成功能
	理解:
		切面是通知和切入点的结合。现在发现了吧，没连接点什么事情，连接点就是为了让你好理解切点，搞出来的，明白这个概念就行了。
		通知说明了干什么和什么时候干（什么时候通过方法名中的before,after，around等就能知道），
		而切入点说明了在哪干（指定到底是哪个方法），这就是一个完整的切面定义。
	5.引入（introduction）在不修改类代码的前提下,为类谈价新的方法和属性
		引用允许我们向现有的类添加新的方法或者属性
	理解:
		允许我们向现有的类添加新方法属性。这不就是把切面（也就是新方法属性：通知定义的）用到目标类中吗
	6.目标（target）被一个或者多个切面所通知的对象
	理解:
		引入中所提到的目标类，也就是要被通知的对象，也就是真正的业务逻辑，他可以在毫不知情的情况下，被咱们织入切面。
		而自己专注于业务本身的逻辑。
	7.代理(proxy)AOP框架创建的对象,用来实现切面契约(aspect contract)包括通知方法执行等功能
	理解:整套aop机制的都是通过代理实现的
	8.织入(weaving)把切面连接到其他的应用程序类型或者对象上,并创建一个被通知的对象,分为:编译时织入,类加载时织入,执行时织入
		组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。
		Spring和其他纯Java AOP框架一样，在运行时完成织入。
	理解:
	把切面应用到目标对象来创建新的代理对象的过程。有3种方式，spring采用的是运行时，为什么是运行时，后面解释。
	关键就是：切点定义了哪些连接点会得到通知

为什么用aop(用途)
	提供了声明的企业服务,特别是EJB的替代服务的声明
	允许用户定制自己的方面,以完成OOP与AOP的互补使用
	1就是为了方便，看一个国外很有名的大师说，编程的人都是“懒人”，因为他把自己做的事情都让程序做了。用了aop能让你少写很多代码，这点就够充分了吧
	2就是为了更清晰的逻辑，可以让你的业务逻辑去关注自己本身的业务，而不去想一些其他的事情，这些其他的事情包括：安全，事物，日志等。


Spring的AOP实现
纯java实现,无需特殊的编译过程,不需要控制类加载器层次
目前只支持方法执行连接点(通知Spring Bean的方法执行)
不是为了提供最完整的AOP实现(尽管它非常强大);而是侧重于提供一种AOP实现的Spring Ioc容器之间的整合,用于帮助解决企业应用中常见问题
Spring AOP不会与AspectJ竞争,从而提供综全面的AOP解决方案

有接口和无接口的Spring AOP实现区别
Spring AOP默认使用标准的JavaSE动态代理作为AOP代理,这使得任何接口(或者接口集)都可以被代理
Spring AOP中也可以使用CGLIB代理(如果一个业务对象并没有实现一个接口)

Schema-based的AOP实现
Schema -- based AOP
Spring所有的切面和通知其都必须放在一个<aop:config>内(可以配置包含多个<aop:config>元素),
每个<aop:config>可以包含pointcut,advisor和aspect元素(它们必须按照这个顺序进行声明)
<aop:config>风格是配置大量使用Spring的自动代理机制

aspect
	<aop:config>
		<aop:aspect id="myAspect" ref="aBean">
			...
		</aop:aspect>
	</aop:config>
	<bean id="aBean" class="...">
		...
	</bean>
See:spring-aop-schema-advice.xml


http://www.mamicode.com/info-detail-889886.html
http://blog.csdn.net/zhangjiawei520/article/details/7474923




















