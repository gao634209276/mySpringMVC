spring加载bean的方法总结：
方法1： 在初始化时保存ApplicationContext对象，可再分为如下三种
	1.1 XmlBeanFactory 引用资源
		Resource resource = new ClassPathResource("appcontext.xml");
		BeanFactory factory = new XmlBeanFactory(resource);
	1.2 二:ClassPathXmlApplicationContext 编译路径
		ApplicationContext factory=new ClassPathXmlApplicationContext("classpath:appcontext.xml");
		ApplicationContext factory=new ClassPathXmlApplicationContext("appcontext.xml"); // src目录下的
		ApplicationContext factory=new ClassPathXmlApplicationContext("conf/appcontext.xml"); // src/conf 目录下的
		ApplicationContext factory=new ClassPathXmlApplicationContext("file:G:/Test/src/appcontext.xml");
	1.3 三 : 用文件系统的路径
		ApplicationContext factory=new FileSystemXmlApplicationContext("src/appcontext.xml");
		//使用了 classpath: 前缀,作为标志, 这样,FileSystemXmlApplicationContext 也能够读入classpath下的相对路径
		ApplicationContext factory=new FileSystemXmlApplicationContext("classpath:appcontext.xml");
		ApplicationContext factory=new FileSystemXmlApplicationContext("file:G:/Test/src/appcontext.xml");
		ApplicationContext factory=new FileSystemXmlApplicationContext("G:/Test/src/appcontext.xml");
	说明：这种方式适用于采用Spring框架的独立应用程序，需要程序通过配置文件手工初始化Spring的情况。
方法2 ：通过Spring提供的工具类获取ApplicationContext对象
	代码：
		import org.springframework.web.context.support.WebApplicationContextUtils;
		ApplicationContext ac1 = WebApplicationContextUtils.getRequiredWebApplicationContext(ServletContext sc);
		ApplicationContext ac2 = WebApplicationContextUtils.getWebApplicationContext(ServletContext sc);
		ac1.getBean("beanId");
		ac2.getBean("beanId");
	说明：
	这种方式适合于采用Spring框架的B/S系统，通过ServletContext对象获取ApplicationContext对象，然后在通过它获取需要的类实例。
	上面两个工具方式的区别是，前者在获取失败时抛出异常，后者返回null。
方法3： 继承自抽象类ApplicationObjectSupport
	说明：抽象类ApplicationObjectSupport提供getApplicationContext()方法，可以方便的获取到ApplicationContext。
	Spring初始化时，会通过该抽象类的setApplicationContext(ApplicationContext context)方法将ApplicationContext 对象注入。
方法4： 继承自抽象类WebApplicationObjectSupport
	说明：类似上面方法，调用getWebApplicationContext()获取WebApplicationContext
方法5： 实现接口ApplicationContextAware
	说明：实现该接口的setApplicationContext(ApplicationContext context)方法，并保存ApplicationContext 对象。
	Spring初始化时，会通过该方法将ApplicationContext对象注入。
后三种方法我没有用过。最后使用的是：
	ApplicationContext ctx = new ClassPathXmlApplicationContext("classpath*:spring/applicationContext*.xml");
读取src/spring下的多个配置文件。但是这样实际是加载两次配置文件，感觉不太好

网上有这个文章，有时间要试验一下
	在web应用中一般用ContextLoaderListener加载webapplication,
	如果需要在action之外或者control类之外获取webapplication思路之一是，单独写个类放在static变量中，
	类似于：
		public class AppContext {
			private static AppContext instance;
			private AbstractApplicationContext appContext;

			public synchronized static AppContext getInstance() {
				if (instance == null) {
					instance = new AppContext();
				}
				return instance;
			}

			private AppContext() {
				this.appContext = new ClassPathXmlApplicationContext(
					"/applicationContext.xml");
			}

			public AbstractApplicationContext getAppContext() {
				return appContext;
			}
		}
	不过这样，还是加载了2次applicationcontext,servlet一次，路径加载一次；觉得不如直接用路径加载，舍掉servlet加载
在网上也找了些其他说法:实现ApplicationContextAware 接口，或者servletcontextAware接口,还要写配置文件。
有的竟然要把配置文件里的listener，换成自己的类，这样纯粹多此一举。不过有的应用不是替换，是在补一个listener，
    我在一版的jpetstore（具体那一版不知道）里发现了这个：
    [web.xml]里
		<listener>
			<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
		</listener>
		<listener>
			<listener-class>com.ibatis.jpetstore.util.SpringInit</listener-class>
		</listener>
	其中SpringInit实现接口ServletContextListener ：
		public class SpringInit implements ServletContextListener {
			private static WebApplicationContext springContext;

			public SpringInit() {
				super();
			}

			public void contextInitialized(ServletContextEvent event) {
				springContext = WebApplicationContextUtils.getWebApplicationContext(event.getServletContext());
			}


			public void contextDestroyed(ServletContextEvent event) {
			}

			public static ApplicationContext getApplicationContext() {
				return springContext;
			}
		}
	在其中的一个bean的构造里SpringInit获取applicationcontext,代码：
		public OrderBean() {
		    this(
			    (AccountService) SpringInit.getApplicationContext().getBean("accountService"),
			    (OrderService) SpringInit.getApplicationContext().getBean("orderService") );
	    }
	恩，这种在action,servlet之外的bean里获取applicationcontext的方法值得参考，应该有用