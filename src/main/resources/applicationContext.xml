<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<context:component-scan base-package="spring"/>
	<!-- 业务类，可以设置为自动装配 -->
	<mvc:annotation-driven/>
	<mvc:default-servlet-handler/>


	<!--Remote Site conf Bean-->
	<!--<bean id="accountService" class="spring.rmi.AccountServiceImpl"/>-->
	<!--<bean class="org.springframework.remoting.rmi.RmiServiceExporter">
		&lt;!&ndash; 不一定要与要输出的bean同名&ndash;&gt;
		<property name="serviceName" value="RmiService"/>
		<property name="service" ref="serviceImpl"/>
		<property name="serviceInterface" value="spring.service.ServiceIf"/>
		&lt;!&ndash;  默认为1199&ndash;&gt;
		<property name="registryPort" value="1199"/>
	</bean>-->
	<!--  使用HTTP调用器暴露服务,类似rmi方式,采用java序列化,数据量较大 -->
	<bean name="/httpInvokerService" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
		<property name="service" ref="serviceImpl"/>
		<property name="serviceInterface" value="spring.service.ServiceIf"/>
	</bean>
	<!-- xml传输数据，数据量比httpinvoker方式小 -->
	<bean name="/burlapService" class="org.springframework.remoting.caucho.BurlapServiceExporter">
		<property name="service" ref="serviceImpl"/>
		<property name="serviceInterface" value="spring.service.ServiceIf"/>
	</bean>
	<!--  远程服务，采用hessian序列化，数据量最小 -->
	<bean name="/hessianService" class="org.springframework.remoting.caucho.HessianServiceExporter">
		<property name="service" ref="serviceImpl"/>
		<property name="serviceInterface" value="spring.service.ServiceIf"/>
	</bean>

	<!--<bean id="accountWebService" class="org.springframework.remoting.jaxrpc.JaxRpcPortProxyFactoryBean">
		<property name="serviceInterface" value="example.RemoteAccountService"/>
		<property name="wsdlDocumentUrl" value="http://localhost:8080/account/services/accountService?WSDL"/>
		<property name="namespaceUri" value="http://localhost:8080/account/services/accountService"/>
		<property name="serviceName" value="AccountService"/>
		<property name="portName" value="AccountPort"/>
	</bean>-->
	<!--<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.plateno.interceptor.CommonInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>-->


	<!--Client Site conf Bean-->
	<!--为了把rmi服务连接到客户端上，我们将创建一个单独的Spring容器，包含这个简单对象和链接配置位的服务：-->
	<!--<bean id="rmiProxyFactoryBean" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
		<property name="serviceUrl" value="rmi://localhost:1199/remote/rmiService"/>
		<property name="serviceInterface" value="spring.service.ServiceIf"/>
	</bean>-->
	<bean id="httpInvokerProxyFactoryBean" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
		<property name="serviceUrl" value="http://localhost:8080/remote/httpInvokerService"/>
		<property name="serviceInterface" value="spring.service.ServiceIf"/>
	</bean>
	<bean id="burlapProxyFactoryBean" class="org.springframework.remoting.caucho.BurlapProxyFactoryBean">
		<property name="serviceUrl" value="http://localhost:8080/remote/BurlapService"/>
		<property name="serviceInterface" value="spring.service.ServiceIf"/>
	</bean>
	<bean id="hessianProxyFactoryBean" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">
		<property name="serviceUrl" value="http://localhost:8080/remote/hessianService"/>
		<property name="serviceInterface" value="spring.service.ServiceIf"/>
	</bean>
</beans>